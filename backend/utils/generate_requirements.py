import os
import subprocess

def generate_requirements(repo_path: str) -> str:
    """
    Use pipreqs to generate requirements.txt in the repo and return its contents as a string.
    Fallback to existing requirements.txt if pipreqs fails or finds nothing.
    Handles encoding errors and sorts output.
    """
    req_path = os.path.join(repo_path, "requirements.txt")
    pipreqs_cmd = [
        "pipreqs", repo_path, "--force", "--savepath", req_path, "--encoding", "utf-8"
    ]
    try:
        result = subprocess.run(pipreqs_cmd, capture_output=True, text=True)
        # If pipreqs fails or returns no requirements, fallback
        pipreqs_failed = result.returncode != 0 or "No importable module" in result.stdout or "No importable module" in result.stderr
        if pipreqs_failed or not os.path.exists(req_path):
            # Fallback: check for existing requirements.txt
            if os.path.exists(req_path):
                with open(req_path, "r", encoding="utf-8", errors="ignore") as f:
                    content = f.read().strip()
                if content:
                    lines = sorted(set(line.strip() for line in content.splitlines() if line.strip() and not line.startswith("#")))
                    return "# Fallback: using existing requirements.txt\n" + "\n".join(lines)
            return "No importable modules or requirements detected."
        # Read generated requirements.txt
        with open(req_path, "r", encoding="utf-8", errors="ignore") as f:
            content = f.read().strip()
        if not content:
            return "No importable modules or requirements detected."
        # Clean and sort output
        lines = sorted(set(line.strip() for line in content.splitlines() if line.strip() and not line.startswith("#")))
        return "# Generated by pipreqs\n" + "\n".join(lines)
    except Exception as e:
        # Fallback: check for existing requirements.txt
        if os.path.exists(req_path):
            try:
                with open(req_path, "r", encoding="utf-8", errors="ignore") as f:
                    content = f.read().strip()
                if content:
                    lines = sorted(set(line.strip() for line in content.splitlines() if line.strip() and not line.startswith("#")))
                    return "# Fallback: using existing requirements.txt\n" + "\n".join(lines)
            except Exception:
                pass
        return f"# Error generating requirements.txt: {e}" 